// Start writing your ScalaFiddle code here
/*
val x = 1 + 1 //name results of expressons with val
println(x)

x = 3 //error, values cannot be re-assigned

val x: Int = 1 + 1 //explicitly state the type

var x = 1 + 1 // variable
x = 3 //variable can be re-assign
println(x * x) //9
var x: Int = 1 + 1 // explicityly state the type

// combine expressions by surrounding them with {}
println({
  val x = 1 + 1
  x + 1
})

// Fucntions
// lambda
(x: Int) => x + 1 

// named  function
val addOne = (x: Int) => x + 1
println(addOne(1))

// multiple parameters
val add = (x: Int, y: Int) => x + y
println(add(1, 2))

//no parameters
val getTheAnswer = () => 42
println(getTheAnser())

// Methods
def add(x: Int, y: Int): Int = x + y
println(add(1, 2))

// can take multiple parameter lists
def addThenMultiply(x: Int, y: Int)(multiplier: Int): Int = (x + y) * multiplier
println(addThenMultiply(1, 2)(2))

// or no parameter lists at all
def name: String = System.getProperty("user.name")
println("Hello, " + name + "!")

// can have multi-line expressions
def getSquareString(input: Double): String = {
  val Square = input * input
  square.toString
}
*/

// Classes
class Greeter(prefix: String, suffix: String) {
  def greet(name: String): Unit =
    println(prefix + name + suffix)
}

// make instance
val greeter = new Greeter("Hello, ", "!")
greeter.greet("Scala developer")

// Case Classes
case class Point(x: Int, y: Int)

// instantiate case classes without new keyword
val point = Point(1, 2)
val anotherPoint = Point(1, 2)
val yetAnotherPoint = Point(2, 2)

// compared by value
if (point == anotherPoint) {
  println(point + " and " + anotherPoint + " are the same.")
} else {
  println(point + " and " + anotherPoint + " are different.")
}


// Objects
object IdFactory {
  private var counter = 0
  def create(): Int = {
    counter += 1
    counter
  }
}

// access an object
val newId: Int = IdFactory.create()
println(newId)
val newerId: Int = IdFactory.create()
println(newerId)

// Traits
trait Greeter {
  def greet(name: String): Unit
}
// can have default  implementations
trait Greeter  {
  def greet(name: String): Unit = 
    print("Hello, " + name + "!")
}

// can extend and override an implemetation
class DefaultGreeter extends Greeter


