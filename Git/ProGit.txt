/*
 * book_name:ProGit
 * origin_URL: https://git-scm.com/book/zh/v2
 * authoer: x_a_97@163.com
 */

# 工作目录中初始化新仓库 
git init

# 开始对文件进行跟踪
git add *.go

# 从现有仓库克隆
# 收取的是项目历史的所有数据
git clone git://github.com/schacon/grit.git

# 克隆时自定义 新建项目名称
git clone git://github.com/schacon/grit.git mygrit

# PS: 可用 git://协议, http(s):// 或 user@server:/path.git表示的SSH传输协议

# 检查文件状态
# 文件状态: untracked/unmodified/modified/staged
git status

# 跟踪新文件
git add README

# 暂存已修改文件
# eg:benchmarks.rb 已修改未暂存
git add benchmarks.rb

# 忽略文件
# 创建.gitignore 文件
# .gitignore 模板如下
	*.[oa]
	*~
	*.a
	!lib.a
	build/
	doc/*.txt

# 查看具体修改
# 比较工作目录中 当前文件和暂存区域快照的差异
git diff

# 查看已暂存文件和上次提交的快照之间的差异
git diff --staged

# 提交更新
git commit -m. "Story 182: Fix benchmarks for speed"

# 跳过 暂存直接提交
git commit -am 'added. new benchmards'

# 从git暂存区域移除, 并从工作目录删除该文件
git rm grit.gemspec

# 从git暂存区域移除文件, 但保留在工作目录中
git rm --cached *.log

# 对文件改名
git mv file_from file_to

# 查看提交历史
git log # 按提交时间列出所有更新
git log -p -2 # 显示最近两次提交的差异

# 查看每次提交的简略统计信息
git log --stat

# 可使用 --pretty指定输出格式
git log --pretty=oneline
git log --pretty=format:"%h %s" --graph

# 列出所有最近两周内的提交
git log --since=2.week

# 列出添加或移除了某个特定函数的引用的提交
git log -Sfunction_name

# 撤销操作
# 如 提交后发现忘记了暂存某些需要的修改
# 以下操作只会有一个提交
git commit -m 'initial commit'
git add forgotten_file
git commit --amend

# 取消暂存 CONTRIBUTING.md文件
git reset HEAD CONTRIBUTING.md

# 撤销修改
git checkout -- CONTRIBUTING.md

# 查看远程仓库
git clone https://github.com/schacon/ticgit
cd ticgit
git remote

# 查看远程仓库 简写和URL
git remote -v

# 添加远程仓库
git remote add <shortname> <url>
eg: git remote add pb https://github.com/paulboone/ticgit

# 从远程仓库中拉取
git fetch [remote-name]

# 从远程仓库自动抓取然后合并远程分支到当前分支
 git pull

 # 推送到远程仓库
 git push origin master

 # 查看某个远程仓库更多的信息
 git remote show [remote-name]
 eg: git remote show origin

 # 远程仓库重命名
 # 同时会修改远程分支名字
 git remote rename pb paul

 # 远程仓库移除
 git remote rm paul
 git remote

 # 打标签
 # 列出已有标签
 git tag

 # 特定模式查找标签
 git tag -l 'v1.8.5*'

# 创建标签 - 轻量标签lightweight/附注标签annotated
# 创建一个附注标签
git tag -a v1.4 -m 'my version 1.4'
git tag
git show v1.4

# 创建一个轻量标签
git tag v1.4-lw
git tag
git show v1.4-lw

# 后期打标签
git log --pretty=oneline
git tag -a v1.2 9fceb02 # 校验和

# 推送标签到共享服务器
git push origin [tagname]
eg: git push origin v1.5

# 推送全部标签
git push origin --tags

# 删除本地标签
git tag -d v1.4-lw

# 更新远程仓库的标签
git push <remote> :refs/tags/<tagname>
eg: git push origin: refs/tags/v1.4-lw

# 检出标签
git checkout -b version2 v2.0.0

# 设定 Git 别名
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

# 设置取消暂存的别名
git config --global alias.unstage 'reset HEAD --'

# 执行外部命令, 在命令前加入!
git config --global alias.visual '!gitk'

# 上一次提交
git config --global alias.last 'log -1 HEAD'

# Git分支, 保存一系列不同时刻的文件快照
# blob对象保存文件快照
# 树对象记录目录结构和blob对象索引
# 提交对象包含指向前述对象的指针+提交信息(作者姓名, 邮箱, 提交时输入的信息, 指向它的父对象的指针)

# 创建分支,只是创建一个新的指向提交对象的可变指针
git branch testing # 在当前所在的提交对象上创建一个指针

# 查看哥哥分支当前所指的对象
git log --oneline --decorate

# 切换分支
git checkout testing # HEAD指向testing分支

# 查看提交历史, 各个分支的指向, 项目的分支分叉情况
git log --oneline --decorate --graph --all

# 新建一个分支并切换到此分支上
git checkout -b iss53 # 新分支 iss53

# 合并分支
git merge iss53

# 删除不再需要的分支
git branch -d iss53

# 启动可视化合并工具
git mergetool

# 分支管理
# 得到当前所有分支的一个列表
git branch

# 查看每个分支的最后一次提交
git branch -v

# 查看哪些分支已经合并到当前分支
git branch --merged

# 查看尚未合并到当前分支的分支
git branch --no-merged

# 分支开发工作流
# master 分支上保留完全稳定的代码
# 特性分支, 被用来实现单一特性或相关工作

# 查看远程分支完整列表
git ls-remote

# 获得远程分支的更多信息 
git remote show

# 查找origin是哪个服务器,
# 从中抓取本地没有的数据,
# 更新本地数据库
# 移动origin/master指针指向新的、更新后的位置
git fetch origin

# 从一个远程跟踪分支检出一个本地分支, 会自动创建一个“跟踪分支”
git checkout --track origin/serverfix

 # 为分支创建跟踪信息
git branch --set-upstream-to=origin/<分支> feature/risk-326

# 查看设置的所有跟踪分支
git branch -vv

# 自动抓取并合并
git pull

# 删除远程分支
git push origin --delete serverfix



